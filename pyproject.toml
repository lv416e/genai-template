[project]
name = "genai"
version = "0.1.0"
description = "Modern GenAI development environment template"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "GenAI Developer", email = "developer@example.com" }]
requires-python = ">=3.12"
keywords = ["genai", "ai", "machine-learning", "template"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Add your production dependencies here
    # Example AI/ML dependencies:
    # "numpy>=1.24.0",
    # "pandas>=2.0.0",
    # "scikit-learn>=1.3.0",
    # "tensorflow>=2.15.0",
    # "torch>=2.1.0",
    # "transformers>=4.35.0",
    # "openai>=1.0.0",
    # "anthropic>=0.8.0",
]

[project.optional-dependencies]
dev = [
    # Code quality and formatting
    "ruff>=0.8.0",
    "mypy>=1.15.0",

    # Testing
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.5.0",
    "pytest-mock>=3.12.0",

    # Development tools
    "pre-commit>=4.0.0",
    "ipython>=8.18.0",
    "jupyter>=1.1.0",
    "notebook>=7.2.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.5.0",
    "pytest-mock>=3.12.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/genai"
Documentation = "https://yourusername.github.io/genai"
Repository = "https://github.com/yourusername/genai"
"Bug Tracker" = "https://github.com/yourusername/genai/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
# UV configuration
dev-dependencies = [
    # All dev dependencies are managed through project.optional-dependencies.dev
]

# Use managed Python installations
python-preference = "managed"

# Cache configuration
cache-dir = ".uv-cache"

[tool.ruff]
# Set line length to 120 characters as requested
line-length = 120
indent-width = 4

# Target Python 3.12+
target-version = "py312"

[tool.ruff.lint]
# Enable comprehensive linting rules
select = [
    # Pycodestyle
    "E", # Error
    "W", # Warning

    # Pyflakes
    "F", # Pyflakes

    # pyupgrade
    "UP", # pyupgrade

    # flake8-bugbear
    "B", # flake8-bugbear

    # flake8-simplify
    "SIM", # flake8-simplify

    # isort
    "I", # isort

    # flake8-comprehensions
    "C4", # flake8-comprehensions

    # flake8-implicit-str-concat
    "ISC", # flake8-implicit-str-concat

    # Pylint
    "PL", # Pylint

    # Ruff-specific rules
    "RUF", # Ruff-specific rules

    # flake8-annotations
    "ANN", # flake8-annotations
]

ignore = [
    # Disable some overly strict rules for better development experience
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "ISC001",  # Implicit string concatenation (conflicts with formatter)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Use double quotes for strings.
quote-style = "double"

# Indent with spaces, rather than tabs.
indent-style = "space"

# Respect magic trailing commas.
skip-magic-trailing-comma = false

# Automatically detect the appropriate line ending.
line-ending = "auto"

# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in docstrings.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and longer lines
"tests/**/*" = ["PLR2004", "S101", "E501"]

[tool.ruff.lint.isort]
# Known first party packages (customize for your project)
known-first-party = ["genai"]

# Group imports properly
combine-as-imports = true
split-on-trailing-comma = true

[tool.mypy]
# MyPy configuration - moderate strictness as requested
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Moderate strictness - not too strict to maintain good DX
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false

# Error handling
strict_optional = true
no_implicit_optional = true

# Import handling
ignore_missing_imports = true
follow_imports = "silent"

# Output formatting
show_error_codes = true
show_column_numbers = true
pretty = true
color_output = true

[tool.pytest.ini_options]
# Pytest configuration
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=genai",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["genai"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*", "*/.*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
